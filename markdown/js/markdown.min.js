const input=document.getElementById('markdown-input');const preview=document.getElementById('preview');let isScrollingSyncing=false;function updatePreview(){const markdownText=input.value;preview.innerHTML=marked.parse(markdownText);}
function fitPreviewHeight(){console.log('fitPreviewHeight called');preview.style.height='auto';preview.style.height=input.style.height;}
function syncScrollToPreview(){if(isScrollingSyncing)return;isScrollingSyncing=true;const scrollTop=input.scrollTop;const scrollHeight=input.scrollHeight-input.clientHeight;const scrollRatio=scrollHeight>0?scrollTop/scrollHeight:0;const previewScrollHeight=preview.scrollHeight-preview.clientHeight;const previewScrollTop=previewScrollHeight*scrollRatio;preview.scrollTop=previewScrollTop;setTimeout(()=>{isScrollingSyncing=false;},10);}
function syncScrollToEditor(){if(isScrollingSyncing)return;isScrollingSyncing=true;const scrollTop=preview.scrollTop;const scrollHeight=preview.scrollHeight-preview.clientHeight;const scrollRatio=scrollHeight>0?scrollTop/scrollHeight:0;const editorScrollHeight=input.scrollHeight-input.clientHeight;const editorScrollTop=editorScrollHeight*scrollRatio;input.scrollTop=editorScrollTop;setTimeout(()=>{isScrollingSyncing=false;},10);}
function debounce(func,wait){let timeout;return function executedFunction(...args){const later=()=>{clearTimeout(timeout);func(...args);};clearTimeout(timeout);timeout=setTimeout(later,wait);};}
input.addEventListener('input',updatePreview);input.addEventListener('scroll',debounce(syncScrollToPreview,10));preview.addEventListener('scroll',debounce(syncScrollToEditor,10));new ResizeObserver(fitPreviewHeight).observe(input);updatePreview();
